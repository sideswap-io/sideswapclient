/* automatically generated by rust-bindgen 0.65.1 */

#[doc = " A server session"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GA_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GA_json {
    _unused: [u8; 0],
}
#[doc = " An api method call that potentially requires two factor authentication to complete"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GA_auth_handler {
    _unused: [u8; 0],
}
#[doc = " A notification handler"]
pub type GA_notification_handler = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, details: *mut GA_json),
>;
extern "C" {
    #[doc = " Perform one-time initialization of the library. This call must be made once\n only before calling any other GDK functions, including any functions called\n from other threads.\n\n :param config: The :ref:`init-config-arg`."]
    pub fn GA_init(config: *const GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Completely shut down the library, releasing all resources.\n\n No further GDK calls should be made after this call."]
    pub fn GA_shutdown() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get any error details associated with the last error on the current thread.\n\n :param output: Destination for the output :ref:`error-details` JSON.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_thread_error_details(output: *mut *mut GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new session.\n\n :param session: Destination for the resulting session.\n|     The returned session should be freed using `GA_destroy_session`.\n\n Once created, the caller should set a handler for notifications using\n `GA_set_notification_handler`, before calling `GA_connect` to connect the\n session to the network for use."]
    pub fn GA_create_session(session: *mut *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a handler to be called when notifications arrive for a session.\n\n :param session: The session to receive notifications for.\n :param handler: The handler to receive notifications.\n :param context: A context pointer to be passed to the handler.\n\n This call must be initially made on a session before `GA_connect`.\n :ref:`ntf-notifications` may arrive on different threads, so the caller\n must ensure that shared data is correctly locked within the handler.\n The ``GA_json`` object passed to the caller must be destroyed by the\n caller using `GA_destroy_json`. Failing to do so will result in\n memory leaks.\n\n Once a session has been connected, this call can be made only with null\n values for ``handler`` and ``context``. Once this returns, no further\n notifications will be delivered for the lifetime of the session.\n\n The caller should not call session functions from within the callback\n handler as this may block the application."]
    pub fn GA_set_notification_handler(
        session: *mut GA_session,
        handler: GA_notification_handler,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a session allocated by `GA_create_session`.\n\n :param session: The session to free.\n\n If the session was connected using `GA_connect` then this call will\n disconnect it it before destroying it."]
    pub fn GA_destroy_session(session: *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Connect the session to the specified network.\n\n :param session: The session to connect.\n :param net_params: The :ref:`net-params` of the network to connect to.\n\n This call connects to the remote network services that the session\n requires, for example the Green servers or Electrum servers.\n `GA_connect` must be called only once per session lifetime, after\n `GA_create_session` and before `GA_destroy_session` respectively.\n Once connected, the underlying network connection of the\n session can be controlled using `GA_reconnect_hint`.\n\n Once the session is connected, use `GA_register_user` to create a new\n wallet for the session, or `GA_login_user` to open an existing wallet."]
    pub fn GA_connect(
        session: *mut GA_session,
        net_params: *const GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Connect or disconnect a sessions underlying network connection.\n\n :param session: The session to use.\n :param hint: the :ref:`reconnect` describing the desired reconnection behaviour."]
    pub fn GA_reconnect_hint(
        session: *mut GA_session,
        hint: *const GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current proxy settings for the given session.\n\n :param session: The session to use.\n :param output: Destination for the output :ref:`proxy-info`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_proxy_settings(
        session: *mut GA_session,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute a hashed wallet identifier from a BIP32 xpub or mnemonic.\n\n The identifier returned is computed from the network combined with the\n master chain code and public key of the xpub/mnemonic. It can be used\n as a unique wallet identifier to mitigate privacy risks associated with\n storing the wallet's xpub.\n\n :param net_params: The :ref:`net-params` of the network to compute an identifier for.\n :param params: The :ref:`wallet-id-request` to compute an identifier for.\n :param output: Destination for the output JSON.\n|     The call handlers result is :ref:`login-result`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_wallet_identifier(
        net_params: *const GA_json,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Operate on cached session data.\n\n :param session: The session to use.\n :param details: The :ref:`cache-control-request` giving the operation to perform.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the operation.\n|     The call handlers result is :ref:`cache-control-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_cache_control(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Make a request to an http server.\n\n :param session: The session to use.\n :param params: the :ref:`http-params` of the server to connect to.\n :param output: Destination for the output JSON.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_http_request(
        session: *mut GA_session,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Refresh the sessions internal cache of Liquid asset information.\n\n Each release of GDK comes with a partial list of Liquid assets built-in.\n This call is used to update it to include all the registered Liquid assets\n or any new assets that have been registered since the last update.\n\n :param session: The session to use.\n :param params: the :ref:`assets-params-data` of the server to connect to."]
    pub fn GA_refresh_assets(
        session: *mut GA_session,
        params: *const GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query the Liquid asset registry.\n\n This call is used to retrieve informations about a set of Liquid assets\n specified by their asset id.\n\n :param session: The session to use.\n :param params: the :ref:`get-assets-params` specifying the assets to query.\n :param output: Destination for the output :ref:`asset-details`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_assets(
        session: *mut GA_session,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Validate asset domain name.\n (This is a interface stub)\n"]
    pub fn GA_validate_asset_domain_name(
        session: *mut GA_session,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Validate a gdk format JSON document.\n\n :param session: The session to use.\n :param details: The :ref:`validate-details` to validate.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the validation.\n|     The call handlers result is :ref:`validate-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_validate(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new user wallet or watch only session.\n\n :param session: The session to use.\n :param hw_device: :ref:`hw-device` or empty JSON for software wallet/watch only creation.\n :param details: The :ref:`login-credentials` for software wallet/watch only creation.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the creation.\n|     The call handlers result is :ref:`login-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: When creation a watch only session, the calling session must be logged in.\n .. note:: ``hw_device`` and ``details`` are emptied when called directly from C or C++."]
    pub fn GA_register_user(
        session: *mut GA_session,
        hw_device: *mut GA_json,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Login to a user's wallet.\n\n :param session: The session to use.\n :param hw_device: :ref:`hw-device` or empty JSON for software wallet login.\n :param details: The :ref:`login-credentials` for authenticating the user.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the login.\n|     The call handlers result is :ref:`login-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n If a sessions underlying network connection has disconnected and\n reconnected, the user will need to login again using this function. In\n this case, the caller can pass empty JSON for both ``hw_device`` and\n ``details`` to login using the previously passed credentials and device.\n\n .. note:: ``hw_device`` and ``details`` are emptied when called directly from C or C++."]
    pub fn GA_login_user(
        session: *mut GA_session,
        hw_device: *mut GA_json,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current watch-only login for a logged-in user wallet, if any.\n\n :param session: The session to use.\n :param username: Destination for the watch-only username. Empty string if not set.\n|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_get_watch_only_username(
        session: *mut GA_session,
        username: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Remove and delete the server history of a wallet.\n\n :param session: The session to use.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the removal.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n For multisig Green sessions, removing a wallet removes all history and\n data associated with the wallet on the server. This operation cannot be\n undone, and re-registering the wallet will not bring back the wallet's\n history. For this reason, only empty wallets can be deleted.\n\n For singlesig sessions, removing a wallet removes the locally persisted cache.\n The actual removal will happen after `GA_destroy_session` is called."]
    pub fn GA_remove_account(
        session: *mut GA_session,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a subaccount.\n\n :param session: The session to use.\n :param details: The subaccount ``\"name\"`` (which must not be already used in\n|     the wallet) and ``\"type\"`` (either ``\"2of2\"``, ``\"2of2_no_recovery\"`` or ``\"2of3\"``) must be\n|     populated. Type ``\"2of2_no_recovery\"`` is available only for Liquid networks and\n|     always requires both keys for spending. For type ``\"2of3\"`` the caller may provide\n|     either ``\"recovery_mnemonic\"`` or ``\"recovery_xpub\"`` if they do not wish to have a\n|     mnemonic passphrase generated automatically.\n|     All other fields are ignored.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the creation.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n|     Details of the created subaccount are returned in the ``\"result\"`` element of\n|     the GA_auth_handler. For 2of3 subaccounts the field ``\"recovery_xpub\"`` will\n|     be populated, and ``\"recovery_mnemonic\"`` will contain the recovery mnemonic\n|     passphrase if one was generated. These values must be stored safely by the\n|     caller as they will not be returned again by any call such as `GA_get_subaccounts`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_create_subaccount(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the user's subaccount details.\n\n :param session: The session to use.\n :param details: the :ref:`get-subaccounts-params-data` controlling the request.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`subaccount-list`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_get_subaccounts(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get subaccount details.\n\n :param session: The session to use.\n :param subaccount: The value of ``\"pointer\"`` from :ref:`subaccount-list` for the subaccount.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`subaccount-detail`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_get_subaccount(
        session: *mut GA_session,
        subaccount: u32,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update subaccount information.\n\n :param session: The session to use.\n :param details: :ref:`subaccount-update` giving the details to update.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the update.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_update_subaccount(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a page of the user's transaction history.\n\n :param session: The session to use.\n :param details: :ref:`transactions-details` giving the details to get the transactions for.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++.\n\n .. note:: Transactions are returned as :ref:`tx-list` from newest to oldest with up to 30 transactions per page."]
    pub fn GA_get_transactions(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a new address to receive coins to.\n\n :param session: The session to use.\n :param details: :ref:`receive-address-request`.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`receive-address-details`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_get_receive_address(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a page of addresses previously generated for a subaccount.\n\n :param session: The session to use.\n :param details: :ref:`previous-addresses-request` detailing the previous addresses to fetch.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`previous-addresses`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++.\n\n .. note:: Iteration of all addresses is complete when 'last_pointer' is not\n|     present in the results."]
    pub fn GA_get_previous_addresses(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the user's unspent transaction outputs.\n\n :param session: The session to use.\n :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to fetch.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`unspent-outputs`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_get_unspent_outputs(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the unspent transaction outputs associated with a non-wallet private key.\n\n :param session: The session to use.\n :param details: :ref:`unspent-outputs-private-request` detailing the private key to check.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`unspent-outputs`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: Neither the private key or its derived public key are sent to any third party for this call."]
    pub fn GA_get_unspent_outputs_for_private_key(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Change the status of a user's unspent transaction outputs.\n\n :param session: The session to use.\n :param details: :ref:`unspent-outputs-status` detailing the unspent transaction outputs status to set.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the change.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_set_unspent_outputs_status(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a transaction's details.\n\n :param session: The session to use.\n :param txhash_hex: The transaction hash of the transaction to fetch.\n :param transaction: Destination for the :ref:`external-tx-detail`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_transaction_details(
        session: *mut GA_session,
        txhash_hex: *const ::std::os::raw::c_char,
        transaction: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the sum of unspent outputs paying to a subaccount.\n\n :param session: The session to use.\n :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to\n|    compute the balance from.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_get_balance(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the list of allowed currencies for all available pricing sources.\n\n :param session: The session to use.\n :param currencies: The returned list of :ref:`currencies`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_available_currencies(
        session: *mut GA_session,
        currencies: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert Fiat to BTC and vice-versa.\n\n :param session: The session to use.\n :param value_details: :ref:`convert-amount` giving the value to convert.\n :param output: Destination for the converted values :ref:`amount-data`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_convert_amount(
        session: *mut GA_session,
        value_details: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Encrypt JSON with a server provided key protected by a PIN.\n\n :param session: The session to use.\n :param details: The :ref:`encrypt-with-pin-details` to encrypt.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the encryption.\n|     The call handlers result is :ref:`encrypt-with-pin-result` which the caller should persist.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_encrypt_with_pin(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Decrypt JSON with a server provided key protected by a PIN.\n\n :param session: The session to use.\n :param details: The :ref:`decrypt-with-pin-details` to decrypt.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the decryption.\n|     The call handlers result is the decrypted JSON.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_decrypt_with_pin(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Disable all PIN logins previously set.\n\n After calling this method, the user will not be able to login with PIN\n| from any device that was previously enabled using `GA_encrypt_with_pin`.\n\n :param session: The session to use."]
    pub fn GA_disable_all_pin_logins(session: *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Construct a transaction.\n\n :param session: The session to use.\n :param transaction_details: The :ref:`create-tx-details` for constructing.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the construction.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``transaction_details`` is emptied when called directly from C or C++."]
    pub fn GA_create_transaction(
        session: *mut GA_session,
        transaction_details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Blind a transaction.\n\n :param session: The session to use.\n :param transaction_details: The :ref:`create-tx-details` for blinding.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the blinding.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``transaction_details`` is emptied when called directly from C or C++."]
    pub fn GA_blind_transaction(
        session: *mut GA_session,
        transaction_details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign the user's inputs to a transaction.\n\n :param session: The session to use.\n :param transaction_details: The :ref:`sign-tx-details` for signing, as previously\n|     returned from `GA_create_transaction` or (for Liquid) `GA_blind_transaction`.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the signing.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``transaction_details`` is emptied when called directly from C or C++."]
    pub fn GA_sign_transaction(
        session: *mut GA_session,
        transaction_details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Construct the initiators side of a swap transaction.\n\n :param session: The session to use.\n :param swap_details: The :ref:`create-swap-tx-details` for constructing.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the construction.\n|     The call handlers result is :ref:`create-swap-tx-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_create_swap_transaction(
        session: *mut GA_session,
        swap_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Complete construction of the callers side of a swap transaction.\n\n :param session: The session to use.\n :param swap_details: The :ref:`complete-swap-tx-details` for completing.\n :param call: Destination for the resulting ``GA_auth_handler`` to complete the construction.\n|     The call handlers result is :ref:`complete-swap-tx-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_complete_swap_transaction(
        session: *mut GA_session,
        swap_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Construct a transaction re-depositing expiring UTXOs.\n Used to extend two factor protection for multisig UTXOs.\n\n :param session: The session to use.\n :param details: The :ref:`create-redeposit-tx-details` for constructing.\n :param call: Destination for the resulting GA_auth_handler to perform the construction.\n|     The call handlers result is :ref:`create-redeposit-tx-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_create_redeposit_transaction(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign one or more of a user's inputs in a PSBT or PSET.\n\n :param session: The session to use.\n :param details: The :ref:`sign-psbt-details` for signing.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the signing.\n|     The call handlers result is :ref:`sign-psbt-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++.\n\n .. note:: EXPERIMENTAL warning: this call may be changed in future releases."]
    pub fn GA_psbt_sign(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_psbt_from_json(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get wallet details of a PSBT or PSET.\n\n :param session: The session to use.\n :param details: The :ref:`psbt-wallet-details` for getting the wallet details.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`psbt-get-details-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++.\n\n .. note:: EXPERIMENTAL warning: this call may be changed in future releases."]
    pub fn GA_psbt_get_details(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Broadcast a fully signed transaction, PSBT or PSET to the network.\n\n :param session: The session to use.\n :param details: The :ref:`broadcast-transaction-details` giving the transaction to broadcast.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the broadcast.\n|     The call handlers result is :ref:`broadcast-transaction-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_broadcast_transaction(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Send a transaction created by GA_create_transaction and signed by GA_sign_transaction.\n\n :param session: The session to use.\n :param transaction_details: The :ref:`send-tx-details` for sending.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the send.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``transaction_details`` is emptied when called directly from C or C++."]
    pub fn GA_send_transaction(
        session: *mut GA_session,
        transaction_details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign a message with the private key of an address.\n\n :param session: The session to use.\n :param details: The :ref:`sign-message-request` detailing the message to sign and how to sign it.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the signing.\n|     The call handlers result is :ref:`sign-message-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_sign_message(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Request an email containing the user's nLockTime transactions.\n\n :param session: The session to use."]
    pub fn GA_send_nlocktimes(session: *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the number of blocks after which CSV transactions become spendable without two factor authentication.\n\n :param session: The session to use.\n :param locktime_details: The :ref:`set-locktime-details` for setting the block value.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the change.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``locktime_details`` is emptied when called directly from C or C++."]
    pub fn GA_set_csvtime(
        session: *mut GA_session,
        locktime_details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the number of blocks after which nLockTime transactions become\n|    spendable without two factor authentication. When this call\n|    succeeds, if the user has an email address associated with the\n|    wallet, an updated nlocktimes.zip file will be sent via email.\n\n :param session: The session to use.\n :param locktime_details: The :ref:`set-locktime-details` for setting the block value.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the change.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_set_nlocktime(
        session: *mut GA_session,
        locktime_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction memo to a user's GreenAddress transaction.\n\n :param session: The session to use.\n :param txhash_hex: The transaction hash to associate the memo with.\n :param memo: The memo to set.\n :param memo_type: Unused, pass 0."]
    pub fn GA_set_transaction_memo(
        session: *mut GA_session,
        txhash_hex: *const ::std::os::raw::c_char,
        memo: *const ::std::os::raw::c_char,
        memo_type: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current network's fee estimates.\n\n :param session: The session to use.\n :param estimates: Destination for the returned :ref:`estimates`.\n|     Returned GA_json should be freed using `GA_destroy_json`.\n\n The estimates are returned as an array of 25 elements. Each element is\n an integer representing the fee estimate expressed as satoshi per 1000\n bytes. The first element is the minimum relay fee as returned by the\n network, while the remaining elements are the current estimates to use\n for a transaction to confirm from 1 to 24 blocks.\n"]
    pub fn GA_get_fee_estimates(
        session: *mut GA_session,
        estimates: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the user's credentials.\n\n :param session: The session to use.\n :param details: The :ref:`get-credentials-details` to get the credentials.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the fetch.\n|     The call handlers result is :ref:`login-credentials`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_get_credentials(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the latest un-acknowledged system message.\n\n :param session: The session to use.\n :param message_text: The returned UTF-8 encoded message text.\n|     Returned string should be freed using `GA_destroy_string`.\n\n .. note:: If all current messages are acknowledged, an empty string is returned."]
    pub fn GA_get_system_message(
        session: *mut GA_session,
        message_text: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign and acknowledge a system message.\n\n The message text will be signed with a key derived from the wallet master key and the signature\n sent to the server.\n\n :param session: The session to use.\n :param message_text: UTF-8 encoded message text being acknowledged.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the acknowledgement.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_ack_system_message(
        session: *mut GA_session,
        message_text: *const ::std::os::raw::c_char,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the two factor configuration for the current user.\n\n :param session: The session to use.\n :param config: Destination for the returned :ref:`twofactor_configuration`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_twofactor_config(
        session: *mut GA_session,
        config: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Change wallet settings.\n\n :param session: The session to use.\n :param settings: The new :ref:`settings` values.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the change.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``settings`` is emptied when called directly from C or C++."]
    pub fn GA_change_settings(
        session: *mut GA_session,
        settings: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get current wallet settings.\n\n :param session: The session to use.\n :param settings: Destination for the current :ref:`settings`.\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_settings(
        session: *mut GA_session,
        settings: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_to_string(
        json: *const GA_json,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_string_to_json(
        input: *const ::std::os::raw::c_char,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_string(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_uint32(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_uint64(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_bool(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_json(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a GA_json object.\n\n :param json: GA_json object to free."]
    pub fn GA_destroy_json(json: *mut GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the status/result of an action requiring authorization.\n\n :param call: The auth_handler whose status is to be queried.\n :param output: Destination for the resulting :ref:`auth-handler-status`.\n|     Returned GA_json should be freed using `GA_destroy_json`.\n\n Methods in the api that may require two factor or hardware authentication\n to complete return a GA_auth_handler object. This object encapsulates the\n process of determining whether authentication is required and handling\n conditions such as re-prompting and re-trying after an incorrect two\n factor code is entered.\n\n The object acts as a state machine which is stepped through by the caller\n until the desired action is completed. At each step, the current state can\n be determined and used to perform the next action required.\n\n Some actions require a sequence of codes and decisions; these are hidden\n behind the state machine interface so that callers do not need to handle\n special cases or program their own logic to handle any lower level API\n differences.\n\n The state machine has the following states, which are returned in the\n ``\"status\"`` element from `GA_auth_handler_get_status`:\n\n * ``\"done\"``: The action has been completed successfully. Any data returned\n|  from the action is present in the ``\"result\"`` element of the status JSON.\n| The auth_handler object should be destroyed using `GA_destroy_auth_handler`\n| after receiving this status.\n\n * ``\"error\"``: A non-recoverable error occurred performing the action. The\n| associated error message is given in the status element ``\"error\"``. The\n| auth_handler object should be destroyed using `GA_destroy_auth_handler` and\n| the action restarted from scratch if this state is returned.\n\n * ``\"request_code\"``: Two factor authorization is required. The caller should\n| prompt the user to choose a two factor method from the ``\"methods\"`` element\n| and call `GA_auth_handler_request_code` with the selected method.\n\n * ``\"resolve_code\"``: A twofactor code from the ``\"request_code\"`` step, or\n| data from a hardware device is required. If the status JSON contains\n| :ref:`hw-required-data`, then see :ref:`hw-resolve-overview` for details.\n| Otherwise, to resolve a twofactor code, the caller should prompt the user\n| to enter the code from the twofactor method chosen in the ``\"request_code\"``\n| step, and pass this code to `GA_auth_handler_resolve_code`.\n\n * ``\"call\"``: Twofactor or hardware authorization is complete and the caller\n| should call `GA_auth_handler_call` to perform the action.\n"]
    pub fn GA_auth_handler_get_status(
        call: *mut GA_auth_handler,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Request a two factor authentication code to authorize an action.\n\n :param call: The auth_handler representing the action to perform.\n :param method: The selected two factor method to use"]
    pub fn GA_auth_handler_request_code(
        call: *mut GA_auth_handler,
        method: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Authorize an action by providing its previously requested two factor authentication code.\n\n :param call: The auth_handler representing the action to perform.\n :param code: The two factor authentication code received by the user, or\n|    the serialised JSON response for hardware interaction (see :ref:`hw-resolve-overview`)."]
    pub fn GA_auth_handler_resolve_code(
        call: *mut GA_auth_handler,
        code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform an action following the completion of authorization.\n\n :param call: The auth_handler representing the action to perform."]
    pub fn GA_auth_handler_call(call: *mut GA_auth_handler) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free an auth_handler after use.\n\n :param call: The auth_handler to free."]
    pub fn GA_destroy_auth_handler(call: *mut GA_auth_handler) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enable or disable a two factor authentication method.\n\n :param session: The session to use\n :param method: The two factor method to enable/disable, e.g. ``\"email\"``, ``\"sms\"``, ``\"phone\"``, ``\"gauth\"``\n :param twofactor_details: :ref:`twofactor-detail` giving the two factor method and associated data.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the enablement/disablement.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``twofactor_details`` is emptied when called directly from C or C++."]
    pub fn GA_change_settings_twofactor(
        session: *mut GA_session,
        method: *const ::std::os::raw::c_char,
        twofactor_details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Request to begin the two factor authentication reset process.\n\n Returns the ``\"twofactor_reset\"`` portion of :ref:`twofactor_configuration` in\n the GA_auth_handler result.\n\n :param session: The session to use.\n :param email: The new email address to enable once the reset waiting period expires.\n :param is_dispute: GA_TRUE if the reset request is disputed, GA_FALSE otherwise.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the request.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_twofactor_reset(
        session: *mut GA_session,
        email: *const ::std::os::raw::c_char,
        is_dispute: u32,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Undo a request to begin the two factor authentication reset process.\n\n Returns the ``\"twofactor_reset\"`` portion of :ref:`twofactor_configuration` in\n the GA_auth_handler result.\n\n :param session: The session to use.\n :param email: The email address to cancel the reset request for. Must be\n|     the email previously passed to `GA_twofactor_reset`.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the undo.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: Unlike `GA_twofactor_cancel_reset`, this call only removes the reset\n|     request associated with the given email. If other emails have requested\n|     a reset, the wallet will still remain locked following this call."]
    pub fn GA_twofactor_undo_reset(
        session: *mut GA_session,
        email: *const ::std::os::raw::c_char,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Cancel all two factor reset requests and unlock the wallet for normal operation.\n\n This call requires authentication using an existing wallet twofactor method.\n\n Returns the ``\"twofactor_reset\"`` portion of :ref:`twofactor_configuration` in\n the GA_auth_handler result.\n\n :param session: The session to use.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the cancel.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_twofactor_cancel_reset(
        session: *mut GA_session,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Change twofactor limits settings.\n\n :param session: The session to use.\n :param limit_details: :ref:`transaction-limits` containing the new limits to set.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the change.\n|     The call handlers result is :ref:`transaction-limits`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``limit_details`` is emptied when called directly from C or C++."]
    pub fn GA_twofactor_change_limits(
        session: *mut GA_session,
        limit_details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Encode CBOR into (potentially multi-part) UR-encoding.\n\n :param session: The session to use.\n :param details: :ref:`bcur-encode` containing the CBOR data to encode.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the encoding.\n|     The call handlers result is :ref:`bcur-encoded`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_bcur_encode(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Decode (potentially multi-part) UR-encoded data to CBOR.\n\n :param session: The session to use.\n :param details: :ref:`bcur-decode` containing the the first URI to decode.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the decoding.\n|     The call handlers result is :ref:`bcur-decoded`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n For multi-part data, the call hander will request further parts using\n ``\"request_code\"`` with a method of ``\"data\"``. see: `auth-handler-status` for\n details on the general mechanism and `bcur-decode-auth-handler-status` for\n details on the data passed to and expected from the auth handler.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_bcur_decode(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Verify an RSA challenge.\n\n :param session: The session to use.\n :param details: :ref:`rsa-verify` containing the the details to verify.\n :param call: Destination for the resulting ``GA_auth_handler`` to perform the verification.\n|     The call handlers result is :ref:`rsa-verify-result`.\n\n .. note:: The returned ``GA_auth_handler`` should be freed using `GA_destroy_auth_handler`.\n\n .. note:: ``details`` is emptied when called directly from C or C++."]
    pub fn GA_rsa_verify(
        session: *mut GA_session,
        details: *mut GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a string returned by the api.\n\n :param str: The string to free."]
    pub fn GA_destroy_string(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Get up to 32 random bytes.\n\n Generate up to 32 random bytes using the same strategy as Bitcoin Core code.\n\n :param output_bytes: bytes output buffer\n :param siz: Number of bytes to return (max. 32)"]
    pub fn GA_get_random_bytes(
        num_bytes: usize,
        output_bytes: *mut ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Generate a new random BIP 39 mnemonic.\n\n :param output: The generated mnemonic phrase.\n|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_generate_mnemonic(output: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Generate a new random 12 word BIP 39 mnemonic.\n\n :param output: The generated mnemonic phrase.\n|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_generate_mnemonic_12(
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Validate a BIP 39 mnemonic.\n\n :param mnemonic: The mnemonic phrase\n :param valid: Destination for the result: GA_TRUE if the mnemonic is valid else GA_FALSE"]
    pub fn GA_validate_mnemonic(
        mnemonic: *const ::std::os::raw::c_char,
        valid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Register a network configuration\n\n :param name: The name of the network to register\n :param network_details: The :ref:`network` configuration to register\n\n Any existing configuration with the same name is overwritten.\n If the provided JSON is empty, any existing configuration for\n the network is removed.\n"]
    pub fn GA_register_network(
        name: *const ::std::os::raw::c_char,
        network_details: *const GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the available network configurations\n\n :param output: Destination for the :ref:`networks-list`\n|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_networks(output: *mut *mut GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a uint32_t in the range 0 to (upper_bound - 1) without bias\n\n :param output: Destination for the generated uint32_t."]
    pub fn GA_get_uniform_uint32_t(upper_bound: u32, output: *mut u32) -> ::std::os::raw::c_int;
}
